import os
import ssl
import requests
from telebot.async_telebot import AsyncTeleBot
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import asyncio
import time
import re

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8108601042:AAGT-oTHp7HvZ1Lk6-UaINeqOEwrTshNL08"
bot = AsyncTeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
proxy = "89.213.255.244:46990"
proxy_auth = "28VM8Q1D:1BPQ1ALQ"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP/HTTPS
os.environ['HTTP_PROXY'] = f'http://{proxy}'
os.environ['HTTPS_PROXY'] = f'https://{proxy}'

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É hostname –¥–ª—è SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
ssl._create_default_https_context = ssl._create_unverified_context

# –ó–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
def test_proxy_connection():
    proxies = {
        'http': f'http://{proxy}',
        'https': f'https://{proxy}'
    }
    try:
        response = requests.get('https://www.google.com', proxies=proxies, timeout=5, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        return response.status_code == 200
    except requests.RequestException as e:
        print(f"Proxy connection test failed: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
if not test_proxy_connection():
    print("Proxy setup failed. Check your proxy settings.")
    exit()

def pars():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞.
    """
    data = []

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver —á–µ—Ä–µ–∑ webdriver-manager
    chrome_driver_path = ChromeDriverManager().install()  # –û–Ω –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    
    # –ù–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è WebDriver
    chrome_options.add_argument(f'--proxy-server=http://{proxy}')
    
    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    chrome_options.add_argument(f'--proxy-auth={proxy_auth}')

    driver = webdriver.Chrome(service=Service(chrome_driver_path), options=chrome_options)

    try:
        driver.get('https://kas.fyi/krc20-tokens?view=trending')
        time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        elements = driver.find_elements(By.CSS_SELECTOR, '.flex-grow-1')

        for element in elements:
            data.append(element.text)

    except Exception as e:
        print(f"Error while parsing: {e}")
    finally:
        driver.quit()

    clear_data = []
    for entry in data:
        entry = entry.replace("\n", " ").strip()
        if "Mints" in entry:
            match = re.match(r"^(.*?)(\d{1,3}(?: \d{3})*)\s*Mints$", entry)
            if match:
                name = match.group(1).strip()
                quantity = match.group(2).strip()
                clear_data.append([name, f"{quantity} Mints"])

    return clear_data


@bot.message_handler(commands=['start'])
async def menu(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    await bot.send_message(message.chat.id, 'The bot is running. Version 1.1')
    previous_mints = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö

    while True:
        try:
            data = pars()
            result = []

            for entry in data:
                name = entry[0]
                mints_str = entry[1].replace(' ', '').replace('Mints', '')
                mints_int = int(mints_str)

                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–æ–≤—ã–π
                if name not in previous_mints:
                    if mints_int > 10000:  # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–æ–ª—å—à–µ 4000
                        result.append(f"üî•New KRC-20 - {name} {mints_int} mints!")
                    previous_mints[name] = mints_int
                else:
                    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 10,000
                    if mints_int >= previous_mints[name] + 10000:
                        result.append(f"üî•Hot KRC-20 - {name} {mints_int} mints in the last 15 minutes")
                    previous_mints[name] = mints_int  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message_text in result:
                await bot.send_message(message.chat.id, message_text)

        except Exception as e:
            print(f"Error in main loop: {e}")

        await asyncio.sleep(100)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º


if __name__ == "__main__":
    try:
        asyncio.run(bot.polling(non_stop=True, interval=1, timeout=0))
    except KeyboardInterrupt:
        print("Bot stopped manually.")
